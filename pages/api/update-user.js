import { connectToDatabase } from '../../utils/mongodb';
import jwt from 'jsonwebtoken';
import multer from 'multer';
import FormData from 'form-data'; // ‚úÖ Express ‡¶è ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
import fetch from 'node-fetch'; // ‚úÖ Express ‡¶è HTTP ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
import { ObjectId } from 'mongodb';
// üõë fs import not strictly necessary as local file system operations are removed
import path from 'path';

// üõë Express ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßá‡¶∏ URL (‡¶Ü‡¶™‡¶≤‡ßã‡¶°/‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
const EXPRESS_BASE_URL = 'https://img.ytubetools.com';

export const config = {
    api: {
        bodyParser: false, // Disable default body parser to handle file uploads
    },
};

// ‚úÖ Multer Configuration for MEMORY STORAGE (EROFS Solution)
const upload = multer({
    storage: multer.memoryStorage(), // ‚úÖ Memory Storage ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    limits: { fileSize: 5 * 1024 * 1024 }, // Set file size limit to 5MB
    // Note: File filter validation should be done here if needed.
});

// Helper function to run multer middleware
const runMiddleware = (req, res, fn) => {
    return new Promise((resolve, reject) => {
        fn(req, res, (result) => {
            if (result instanceof Error) {
                return reject(result);
            }
            return resolve(result);
        });
    });
};

// -----------------------------------------------------------------
// ## Express Service Functions
// -----------------------------------------------------------------

// ‚úÖ Express ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá URL ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶∏‡ßá (Uses Buffer directly)
const uploadFileToExpress = async (fileBuffer, originalname) => {
    // üõë No local file system usage
    const form = new FormData();
    
    // ‚úÖ Buffer ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    form.append('file', fileBuffer, { filename: originalname }); 
    form.append('title', originalname); // ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡ßá‡¶Æ ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã

    const uploadResponse = await fetch(`${EXPRESS_BASE_URL}/upload-image`, {
        method: 'POST',
        body: form,
        headers: form.getHeaders(),
    });

    const uploadResult = await uploadResponse.json();

    if (uploadResponse.status !== 200) {
        throw new Error(uploadResult.message || 'Express server upload failed.');
    }
    
    // MongoDB-‡¶§‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ URL
    return `${EXPRESS_BASE_URL}${uploadResult.data.url}`; 
};

// Express ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá
const deleteFileFromExpress = async (imageUrl) => {
    const fileToDelete = path.basename(imageUrl);
    const deleteUrl = `${EXPRESS_BASE_URL}/delete-image/${fileToDelete}`;

    const deleteResponse = await fetch(deleteUrl, {
        method: 'DELETE',
    });

    if (deleteResponse.status !== 200) {
        console.warn(`Express server file deletion failed for ${fileToDelete}. Status: ${deleteResponse.status}`);
    }
};

// -----------------------------------------------------------------
// ## Main Handler
// -----------------------------------------------------------------

export default async function handler(req, res) {
    // üõë filePath variable removed
    let newImageUrl, existingUser;

    if (req.method !== 'PUT') {
        return res.status(405).json({ success: false, message: `Method ${req.method} not allowed` });
    }

    try {
        // 1. Multer ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø‡¶§‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
        await runMiddleware(req, res, upload.single('profileImage'));

        // 2. JWT token ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§)
        const token = req.headers.authorization?.split(' ')[1];
        if (!token) {
            return res.status(401).json({ success: false, message: 'Unauthorized' });
        }

        const decodedToken = jwt.verify(token, process.env.NEXT_PUBLIC_JWT_SECRET);
        if (!decodedToken) {
            return res.status(401).json({ success: false, message: 'Unauthorized' });
        }

        const { db } = await connectToDatabase();
        const { userId, username, role, email } = req.body;
        
        if (!ObjectId.isValid(userId)) {
            return res.status(400).json({ success: false, message: 'Invalid user ID' });
        }
        
        // Find existing user to get old image URL
        existingUser = await db.collection('user').findOne({ _id: new ObjectId(userId) });
        if (!existingUser) {
            return res.status(404).json({ success: false, message: 'User not found' });
        }
        
        const updateData = {
            username, role, email,
            updatedAt: new Date(),
        };

        // 3. ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶≤‡¶ú‡¶ø‡¶ï
        if (req.file) {
            const fileBuffer = req.file?.buffer; // ‚úÖ Get Buffer
            const originalname = req.file?.originalname;
            
            // A. Express ‡¶è ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶°
            newImageUrl = await uploadFileToExpress(fileBuffer, originalname);
            
            // üõë Local temporary file cleanup code removed
            
            // B. ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ‡¶á‡¶Æ‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü
            const oldImageUrl = existingUser.profileImage;
            if (oldImageUrl) {
                await deleteFileFromExpress(oldImageUrl);
            }

            updateData.profileImage = newImageUrl; // Store the new image URL
        }

        // 4. MongoDB ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
        const updatedUser = await db.collection('user').updateOne(
            { _id: new ObjectId(userId) },
            { $set: updateData }
        );

        if (!updatedUser.matchedCount) {
            // ‡¶Ø‡¶¶‡¶ø MongoDB ‡¶§‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ Express ‡¶è ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶∏‡¶´‡¶≤ ‡¶π‡¶Ø‡¶º, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
            if (newImageUrl) {
                 await deleteFileFromExpress(newImageUrl);
            }
            return res.status(404).json({ success: false, message: 'User not found' });
        }

        // 5. ‡¶∏‡¶æ‡¶´‡¶≤‡ßç‡¶Ø ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏
        res.status(200).json({
            success: true,
            message: 'User updated successfully',
            imageUrl: updateData.profileImage || existingUser.profileImage, // Return the final image URL
        });
    } catch (error) {
        console.error('Error updating user:', error.message);
        
        // General cleanup if any error occurred mid-process
        // üõë Local file cleanup code removed
        if (newImageUrl) {
            await deleteFileFromExpress(newImageUrl);
        }
        
        // Check if the error is a JWT verification error
        if (error.name === 'JsonWebTokenError' || error.name === 'TokenExpiredError') {
            return res.status(401).json({ success: false, message: 'Invalid or expired token' });
        }

        res.status(500).json({ success: false, message: error.message });
    }
}